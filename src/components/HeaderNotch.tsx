"use client"

import { useEffect, useRef,useState } from "react";

const NotchShapes = {
    extendedDown: "M 466.691 0 C 492.072 0.249 504.446 12.196 516.734 24.309 C 528.856 36.258 540.894 48.124 565.253 48.124 C 540.894 48.124 528.836 59.992 516.714 71.94 C 504.426 84.053 492.052 96.249 466.671 96.249 L 282.627 96.249 L 98.58 96.249 C 73.202 96.249 60.831 84.055 48.544 71.944 C 36.419 59.992 24.359 48.13 0 48.124 C 24.359 48.11 36.398 36.258 48.519 24.309 C 60.808 12.197 73.181 0 98.562 0 L 282.627 0 L 466.691 0 Z;",
    collapsed: "M 466.691 0 C 492.072 0.249 504.446 12.446 516.734 24.559 C 528.856 36.507 540.894 48.374 565.253 48.374 C 540.894 48.374 528.836 48.374 516.714 48.374 C 504.426 48.374 492.052 48.374 466.671 48.374 L 282.627 48.374 L 98.58 48.374 C 73.202 48.374 60.831 48.374 48.544 48.374 C 36.419 48.374 24.359 48.13 0 48.124 C 24.359 48.374 36.398 36.507 48.519 24.559 C 60.808 12.446 73.181 0.249 98.562 0.249 L 282.627 0.249 L 466.691 0 Z;"



}

const HeaderNotch = ({isHovering} : {isHovering: boolean}) => {
    const animationRef = useRef<SVGAnimateElement>(null)
// width="566" height="97" viewBox="0 0 566 97"
    useEffect(() => {
        if(animationRef.current){
            if(isHovering){
                animationRef.current.setAttribute("values", `${NotchShapes.collapsed} ${NotchShapes.extendedDown}`)
            } else {
                animationRef.current.setAttribute("values", `${NotchShapes.extendedDown} ${NotchShapes.collapsed}`)
            }
      
            animationRef.current.beginElement();
        }
    })   

    // "M 466.691 0 C 492.072 0.249 504.446 12.196 516.734 24.309 C 528.856 36.258 540.894 48.124 565.253 48.124 C 540.894 48.124 528.836 59.992 516.714 71.94 C 504.426 84.053 492.052 96.249 466.671 96.249 L 282.627 96.249 L 98.58 96.249 C 73.202 96.249 60.831 84.055 48.544 71.944 C 36.419 59.992 24.359 48.13 0 48.124 C 24.359 48.11 36.398 36.258 48.519 24.309 C 60.808 12.197 73.181 0 98.562 0 L 282.627 0 L 466.691 0 Z; M 466.691 0 C 492.072 0.249 504.446 12.446 516.734 24.559 C 528.856 36.507 540.894 48.374 565.253 48.374 C 540.894 48.374 528.836 48.374 516.714 48.374 C 504.426 48.374 492.052 48.374 466.671 48.374 L 282.627 48.374 L 98.58 48.374 C 73.202 48.374 60.831 48.374 48.544 48.374 C 36.419 48.374 24.359 48.13 0 48.124 C 24.359 48.374 36.398 36.507 48.519 24.559 C 60.808 12.446 73.181 0.249 98.562 0.249 L 282.627 0.249 L 466.691 0 Z; M 466.691 0 C 492.072 0.249 504.446 12.196 516.734 24.309 C 528.856 36.258 540.894 48.124 565.253 48.124 C 540.894 48.124 528.836 59.992 516.714 71.94 C 504.426 84.053 492.052 96.249 466.671 96.249 L 282.627 96.249 L 98.58 96.249 C 73.202 96.249 60.831 84.055 48.544 71.944 C 36.419 59.992 24.359 48.13 0 48.124 C 24.359 48.11 36.398 36.258 48.519 24.309 C 60.808 12.197 73.181 0 98.562 0 L 282.627 0 L 466.691 0 Z"

    return (
        <>
            
            <div>
            <svg style={{width: "100%"}} viewBox="0 0 566 97" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path className="notchPath" d={NotchShapes.collapsed} fill="#00A6E9">
                <animate ref={animationRef}
                attributeName="d"
                
                values={`${NotchShapes.collapsed} ${NotchShapes.extendedDown}`}
                dur="300ms"
                direction="reverse"
                repeatCount="1"
                calcMode="spline"
                keySplines="0.6 0.2 0.41 1"
                fill="freeze"
                />


                </path>
                
            </svg>
            </div>
        
        </>

    )


}

export default HeaderNotch;